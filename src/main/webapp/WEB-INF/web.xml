<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <display-name>Archetype Created Web Application</display-name>
    <!--welcome pages-->
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

    <!-- springMVC配置前端控制器DispatcherServlet -->
    <servlet>
        <servlet-name>springMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <!-- 配置springMVC加载的配置文件（配置文件里面配置处理器适配器，处理器等等），
            如果不配置contextConfigLocation，则默认加载/WEB-INF/servlet名称-servlet.xml（springMVC-servlet.xml）-->
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/dispatcher-servlet.xml</param-value>
        </init-param>
        <!-- 值为正整数或者0时，表示容器在应用启动时就加载并初始化这个servlet，
             值越小，servlet的优先级越高，就越先被加载 -->
        <load-on-startup>1</load-on-startup>
        <async-supported>true</async-supported>
    </servlet>

    <!-- 配置拦截规则 -->
    <servlet-mapping>
        <servlet-name>springMVC</servlet-name>
        <!-- 第一种： *.action，所有以*.action结尾的访问，都由DispatcherServlet解析
         第二种：/ ，所有访问的地址都由DispatcherServlet解析，对于这种配置会出现一个问题，
              那就是静态文件的访问不需要，DispatcherServlet进行解析（因为访问静态文件直接返回即可，不用再由处理器处理）。
              但是这种方式可以实现RESTful风格的url
         第三种：/* ，这种配置不对，使用这种配置，最终要转发到一个jsp页面时，仍然会由DispatcherServlet解析jsp的地址，
              不能根据jsp的页面找到Handler，会报错-->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    <!-- 把applicationContext.xml加入到配置文件中 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/applicationContext.xml</param-value>
    </context-param>

    <!-- 配置监听器 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
</web-app>